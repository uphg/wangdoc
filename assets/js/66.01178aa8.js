(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{506:function(a,s,e){"use strict";e.r(s);var t=e(76),r=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"bash-的算术运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bash-的算术运算"}},[a._v("#")]),a._v(" Bash 的算术运算")]),a._v(" "),e("h2",{attrs:{id:"算术表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算术表达式"}},[a._v("#")]),a._v(" 算术表达式")]),a._v(" "),e("p",[e("code",[a._v("((...))")]),a._v("语法可以进行整数的算术运算。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("((")]),a._v("foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("))")])]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$foo")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v("\n")])])]),e("p",[e("code",[a._v("((...))")]),a._v("会自动忽略内部的空格，所以下面的写法都正确，得到同样的结果。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("((")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("))")])]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("((")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("))")])]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("((")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("))")])]),a._v("\n")])])]),e("p",[a._v("这个语法不返回值，命令执行的结果根据算术运算的结果而定。只要算术结果不是"),e("code",[a._v("0")]),a._v("，命令就算执行成功。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("((")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("))")])]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$?")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n")])])]),e("p",[a._v("上面例子中，"),e("code",[a._v("3 + 2")]),a._v("的结果是5，命令就算执行成功，环境变量"),e("code",[a._v("$?")]),a._v("为"),e("code",[a._v("0")]),a._v("。")]),a._v(" "),e("p",[a._v("如果算术结果为"),e("code",[a._v("0")]),a._v("，命令就算执行失败。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("((")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("))")])]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$?")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),e("p",[a._v("上面例子中，"),e("code",[a._v("3 - 3")]),a._v("的结果是"),e("code",[a._v("0")]),a._v("，环境变量"),e("code",[a._v("$?")]),a._v("为"),e("code",[a._v("1")]),a._v("，表示命令执行失败。")]),a._v(" "),e("p",[a._v("如果要读取算术运算的结果，需要在"),e("code",[a._v("((...))")]),a._v("前面加上美元符号"),e("code",[a._v("$((...))")]),a._v("，使其变成算术表达式，返回算术运算的值。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n")])])]),e("p",[e("code",[a._v("((...))")]),a._v("语法支持的算术运算符如下。")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("+")]),a._v("：加法")]),a._v(" "),e("li",[e("code",[a._v("-")]),a._v("：减法")]),a._v(" "),e("li",[e("code",[a._v("*")]),a._v("：乘法")]),a._v(" "),e("li",[e("code",[a._v("/")]),a._v("：除法（整除）")]),a._v(" "),e("li",[e("code",[a._v("%")]),a._v("：余数")]),a._v(" "),e("li",[e("code",[a._v("**")]),a._v("：指数")]),a._v(" "),e("li",[e("code",[a._v("++")]),a._v("：自增运算（前缀或后缀）")]),a._v(" "),e("li",[e("code",[a._v("--")]),a._v("：自减运算（前缀或后缀）")])]),a._v(" "),e("p",[a._v("注意，除法运算符的返回结果总是整数，比如"),e("code",[a._v("5")]),a._v("除以"),e("code",[a._v("2")]),a._v("，得到的结果是"),e("code",[a._v("2")]),a._v("，而不是"),e("code",[a._v("2.5")]),a._v("。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n")])])]),e("p",[e("code",[a._v("++")]),a._v("和"),e("code",[a._v("--")]),a._v("这两个运算符有前缀和后缀的区别。作为前缀是先运算后返回值，作为后缀是先返回值后运算。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("i")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$i")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),a._v("i"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$i")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v("i"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$i")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n")])])]),e("p",[a._v("上面例子中，"),e("code",[a._v("++")]),a._v("作为后缀是先返回值，执行"),e("code",[a._v("echo")]),a._v("命令，再进行自增运算；作为前缀则是先进行自增运算，再返回值执行"),e("code",[a._v("echo")]),a._v("命令。")]),a._v(" "),e("p",[e("code",[a._v("$((...))")]),a._v("内部可以用圆括号改变运算顺序。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),a._v("\n")])])]),e("p",[a._v("上面例子中，内部的圆括号让加法先于乘法执行。")]),a._v(" "),e("p",[e("code",[a._v("$((...))")]),a._v("结构可以嵌套。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("**")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("75")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 等同于")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("**")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v(" * "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("))")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("75")]),a._v("\n")])])]),e("p",[a._v("这个语法只能计算整数，否则会报错。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 报错")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.5")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\nbash: 语法错误\n")])])]),e("p",[e("code",[a._v("$((...))")]),a._v("的圆括号之中，不需要在变量名之前加上"),e("code",[a._v("$")]),a._v("，不过加上也不报错。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("number")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),a._v("$number "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n")])])]),e("p",[a._v("上面例子中，变量"),e("code",[a._v("number")]),a._v("前面有没有美元符号，结果都是一样的。")]),a._v(" "),e("p",[a._v("如果在"),e("code",[a._v("$((...))")]),a._v("里面使用字符串，Bash 会认为那是一个变量名。如果不存在同名变量，Bash 就会将其作为空值，因此不会报错。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),a._v(' "hello" '),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),a._v(' "hello" '),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n")])])]),e("p",[a._v("上面例子中，"),e("code",[a._v('"hello"')]),a._v("会被当作变量名，返回空值，而"),e("code",[a._v("$((...))")]),a._v("会将空值当作"),e("code",[a._v("0")]),a._v("，所以乘法的运算结果就是"),e("code",[a._v("0")]),a._v("。同理，如果"),e("code",[a._v("$((...))")]),a._v("里面使用不存在的变量，也会当作"),e("code",[a._v("0")]),a._v("处理。")]),a._v(" "),e("p",[a._v("如果一个变量的值为字符串，跟上面的处理逻辑是一样的。即该字符串如果不对应已存在的变量，在"),e("code",[a._v("$((...))")]),a._v("里面会被当作空值。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("foo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("hello\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),a._v(" foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n")])])]),e("p",[a._v("上面例子中，变量"),e("code",[a._v("foo")]),a._v("的值是"),e("code",[a._v("hello")]),a._v("，而"),e("code",[a._v("hello")]),a._v("也会被看作变量名。这使得有可能写出动态替换的代码。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("foo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("hello\n$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("hello")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),a._v(" foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n")])])]),e("p",[a._v("上面代码中，"),e("code",[a._v("foo + 2")]),a._v("取决于变量"),e("code",[a._v("hello")]),a._v("的值。")]),a._v(" "),e("p",[a._v("最后，"),e("code",[a._v("$[...]")]),a._v("是以前的语法，也可以做整数运算，不建议使用。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" $"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("+2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n")])])]),e("h2",{attrs:{id:"数值的进制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数值的进制"}},[a._v("#")]),a._v(" 数值的进制")]),a._v(" "),e("p",[a._v("Bash 的数值默认都是十进制，但是在算术表达式中，也可以使用其他进制。")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("number")]),a._v("：没有任何特殊表示法的数字是十进制数（以10为底）。")]),a._v(" "),e("li",[e("code",[a._v("0number")]),a._v("：八进制数。")]),a._v(" "),e("li",[e("code",[a._v("0xnumber")]),a._v("：十六进制数。")]),a._v(" "),e("li",[e("code",[a._v("base#number")]),a._v("："),e("code",[a._v("base")]),a._v("进制的数。")])]),a._v(" "),e("p",[a._v("下面是一些例子。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0xff")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("255")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("#"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("11111111")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("255")]),a._v("\n")])])]),e("p",[a._v("上面例子中，"),e("code",[a._v("0xff")]),a._v("是十六进制数，"),e("code",[a._v("2#11111111")]),a._v("是二进制数。")]),a._v(" "),e("h2",{attrs:{id:"位运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#位运算"}},[a._v("#")]),a._v(" 位运算")]),a._v(" "),e("p",[e("code",[a._v("$((...))")]),a._v("支持以下的二进制位运算符。")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("<<")]),a._v("：位左移运算，把一个数字的所有位向左移动指定的位。")]),a._v(" "),e("li",[e("code",[a._v(">>")]),a._v("：位右移运算，把一个数字的所有位向右移动指定的位。")]),a._v(" "),e("li",[e("code",[a._v("&")]),a._v("：位的“与”运算，对两个数字的所有位执行一个"),e("code",[a._v("AND")]),a._v("操作。")]),a._v(" "),e("li",[e("code",[a._v("|")]),a._v("：位的“或”运算，对两个数字的所有位执行一个"),e("code",[a._v("OR")]),a._v("操作。")]),a._v(" "),e("li",[e("code",[a._v("~")]),a._v("：位的“否”运算，对一个数字的所有位取反。")]),a._v(" "),e("li",[e("code",[a._v("^")]),a._v("：位的异或运算（exclusive or），对两个数字的所有位执行一个异或操作。")])]),a._v(" "),e("p",[a._v("下面是右移运算符"),e("code",[a._v(">>")]),a._v("的例子。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n")])])]),e("p",[a._v("下面是左移运算符"),e("code",[a._v("<<")]),a._v("的例子。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<<")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("64")]),a._v("\n")])])]),e("p",[a._v("下面是"),e("code",[a._v("17")]),a._v("（二进制"),e("code",[a._v("10001")]),a._v("）和"),e("code",[a._v("3")]),a._v("（二进制"),e("code",[a._v("11")]),a._v("）的各种二进制运算的结果。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("17")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("17")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("19")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("17")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("^")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("18")]),a._v("\n")])])]),e("h2",{attrs:{id:"逻辑运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算"}},[a._v("#")]),a._v(" 逻辑运算")]),a._v(" "),e("p",[e("code",[a._v("$((...))")]),a._v("支持以下的逻辑运算符。")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("<")]),a._v("：小于")]),a._v(" "),e("li",[e("code",[a._v(">")]),a._v("：大于")]),a._v(" "),e("li",[e("code",[a._v("<=")]),a._v("：小于或相等")]),a._v(" "),e("li",[e("code",[a._v(">=")]),a._v("：大于或相等")]),a._v(" "),e("li",[e("code",[a._v("==")]),a._v("：相等")]),a._v(" "),e("li",[e("code",[a._v("!=")]),a._v("：不相等")]),a._v(" "),e("li",[e("code",[a._v("&&")]),a._v("：逻辑与")]),a._v(" "),e("li",[e("code",[a._v("||")]),a._v("：逻辑或")]),a._v(" "),e("li",[e("code",[a._v("!")]),a._v("：逻辑否")]),a._v(" "),e("li",[e("code",[a._v("expr1?expr2:expr3")]),a._v("：三元条件运算符。若表达式"),e("code",[a._v("expr1")]),a._v("的计算结果为非零值（算术真），则执行表达式"),e("code",[a._v("expr2")]),a._v("，否则执行表达式"),e("code",[a._v("expr3")]),a._v("。")])]),a._v(" "),e("p",[a._v("如果逻辑表达式为真，返回"),e("code",[a._v("1")]),a._v("，否则返回"),e("code",[a._v("0")]),a._v("。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),e("p",[a._v("三元运算符执行一个单独的逻辑测试。它用起来类似于"),e("code",[a._v("if/then/else")]),a._v("语句。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("a")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),a._v("a"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),a._v("a"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n")])])]),e("p",[a._v("上面例子中，第一个表达式为真时，返回第二个表达式的值，否则返回第三个表达式的值。")]),a._v(" "),e("h2",{attrs:{id:"赋值运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算"}},[a._v("#")]),a._v(" 赋值运算")]),a._v(" "),e("p",[a._v("算术表达式"),e("code",[a._v("$((...))")]),a._v("可以执行赋值运算。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),a._v("a"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$a")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),e("p",[a._v("上面例子中，"),e("code",[a._v("a=1")]),a._v("对变量"),e("code",[a._v("a")]),a._v("进行赋值。这个式子本身也是一个表达式，返回值就是等号右边的值。")]),a._v(" "),e("p",[e("code",[a._v("$((...))")]),a._v("支持的赋值运算符，有以下这些。")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("parameter = value")]),a._v("：简单赋值。")]),a._v(" "),e("li",[e("code",[a._v("parameter += value")]),a._v("：等价于"),e("code",[a._v("parameter = parameter + value")]),a._v("。")]),a._v(" "),e("li",[e("code",[a._v("parameter -= value")]),a._v("：等价于"),e("code",[a._v("parameter = parameter – value")]),a._v("。")]),a._v(" "),e("li",[e("code",[a._v("parameter *= value")]),a._v("：等价于"),e("code",[a._v("parameter = parameter * value")]),a._v("。")]),a._v(" "),e("li",[e("code",[a._v("parameter /= value")]),a._v("：等价于"),e("code",[a._v("parameter = parameter / value")]),a._v("。")]),a._v(" "),e("li",[e("code",[a._v("parameter %= value")]),a._v("：等价于"),e("code",[a._v("parameter = parameter % value")]),a._v("。")]),a._v(" "),e("li",[e("code",[a._v("parameter <<= value")]),a._v("：等价于"),e("code",[a._v("parameter = parameter << value")]),a._v("。")]),a._v(" "),e("li",[e("code",[a._v("parameter >>= value")]),a._v("：等价于"),e("code",[a._v("parameter = parameter >> value")]),a._v("。")]),a._v(" "),e("li",[e("code",[a._v("parameter &= value")]),a._v("：等价于"),e("code",[a._v("parameter = parameter & value")]),a._v("。")]),a._v(" "),e("li",[e("code",[a._v("parameter |= value")]),a._v("：等价于"),e("code",[a._v("parameter = parameter | value")]),a._v("。")]),a._v(" "),e("li",[e("code",[a._v("parameter ^= value")]),a._v("：等价于"),e("code",[a._v("parameter = parameter ^ value")]),a._v("。")])]),a._v(" "),e("p",[a._v("下面是一个例子。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("foo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),a._v("foo"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v("\n")])])]),e("p",[a._v("如果在表达式内部赋值，可以放在圆括号中，否则会报错。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),a._v(" a"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n")])])]),e("h2",{attrs:{id:"求值运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#求值运算"}},[a._v("#")]),a._v(" 求值运算")]),a._v(" "),e("p",[a._v("逗号"),e("code",[a._v(",")]),a._v("在"),e("code",[a._v("$((...))")]),a._v("内部是求值运算符，执行前后两个表达式，并返回后一个表达式的值。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$((")]),a._v("foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("))")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("12")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$foo")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n")])])]),e("p",[a._v("上面例子中，逗号前后两个表达式都会执行，然后返回后一个表达式的值"),e("code",[a._v("12")]),a._v("。")]),a._v(" "),e("h2",{attrs:{id:"expr-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expr-命令"}},[a._v("#")]),a._v(" expr 命令")]),a._v(" "),e("p",[e("code",[a._v("expr")]),a._v("命令支持算术运算，可以不使用"),e("code",[a._v("((...))")]),a._v("语法。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("expr")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" + "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n")])])]),e("p",[e("code",[a._v("expr")]),a._v("命令支持变量替换。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("foo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("expr")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$foo")]),a._v(" + "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n")])])]),e("p",[e("code",[a._v("expr")]),a._v("命令也不支持非整数参数。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("expr")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.5")]),a._v(" + "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\nexpr: 非整数参数\n")])])]),e("p",[a._v("上面例子中，如果有非整数的运算，"),e("code",[a._v("expr")]),a._v("命令就报错了。")]),a._v(" "),e("h2",{attrs:{id:"let-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#let-命令"}},[a._v("#")]),a._v(" let 命令")]),a._v(" "),e("p",[e("code",[a._v("let")]),a._v("命令用于将算术运算的结果，赋予一个变量。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("let")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("x")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("+3\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$x")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n")])])]),e("p",[a._v("上面例子中，变量"),e("code",[a._v("x")]),a._v("等于"),e("code",[a._v("2+3")]),a._v("的运算结果。")]),a._v(" "),e("p",[a._v("注意，"),e("code",[a._v("x=2+3")]),a._v("这个式子里面不能有空格，否则会报错。"),e("code",[a._v("let")]),a._v("命令的详细用法参见《变量》一章。")])])}),[],!1,null,null,null);s.default=r.exports}}]);