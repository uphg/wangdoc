(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{511:function(a,s,t){"use strict";t.r(s);var e=t(76),v=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"bash-的基本语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bash-的基本语法"}},[a._v("#")]),a._v(" Bash 的基本语法")]),a._v(" "),t("p",[a._v("本章介绍 Bash 的最基本语法。")]),a._v(" "),t("h2",{attrs:{id:"echo-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#echo-命令"}},[a._v("#")]),a._v(" echo 命令")]),a._v(" "),t("p",[a._v("由于后面的例子会大量用到"),t("code",[a._v("echo")]),a._v("命令，这里先介绍这个命令。")]),a._v(" "),t("p",[t("code",[a._v("echo")]),a._v("命令的作用是在屏幕输出一行文本，可以将该命令的参数原样输出。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" hello world\nhello world\n")])])]),t("p",[a._v("上面例子中，"),t("code",[a._v("echo")]),a._v("的参数是"),t("code",[a._v("hello world")]),a._v("，可以原样输出。")]),a._v(" "),t("p",[a._v("如果想要输出的是多行文本，即包括换行符。这时就需要把多行文本放在引号里面。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<HTML>\n    <HEAD>\n          <TITLE>Page Title</TITLE>\n    </HEAD>\n    <BODY>\n          Page body.\n    </BODY>\n</HTML>"')]),a._v("\n")])])]),t("p",[a._v("上面例子中，"),t("code",[a._v("echo")]),a._v("可以原样输出多行文本。")]),a._v(" "),t("h3",{attrs:{id:"n参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#n参数"}},[a._v("#")]),a._v(" "),t("code",[a._v("-n")]),a._v("参数")]),a._v(" "),t("p",[a._v("默认情况下，"),t("code",[a._v("echo")]),a._v("输出的文本末尾会有一个回车符。"),t("code",[a._v("-n")]),a._v("参数可以取消末尾的回车符，使得下一个提示符紧跟在输出内容的后面。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" -n hello world\nhello world$\n")])])]),t("p",[a._v("上面例子中，"),t("code",[a._v("world")]),a._v("后面直接就是下一行的提示符"),t("code",[a._v("$")]),a._v("。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" b\na\nb\n\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" -n a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" b\nab\n")])])]),t("p",[a._v("上面例子中，"),t("code",[a._v("-n")]),a._v("参数可以让两个"),t("code",[a._v("echo")]),a._v("命令的输出连在一起，出现在同一行。")]),a._v(" "),t("h3",{attrs:{id:"e参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#e参数"}},[a._v("#")]),a._v(" "),t("code",[a._v("-e")]),a._v("参数")]),a._v(" "),t("p",[t("code",[a._v("-e")]),a._v("参数会解释引号（双引号和单引号）里面的特殊字符（比如换行符"),t("code",[a._v("\\n")]),a._v("）。如果不使用"),t("code",[a._v("-e")]),a._v("参数，即默认情况下，引号会让特殊字符变成普通字符，"),t("code",[a._v("echo")]),a._v("不解释它们，原样输出。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[a._v("\\n")]),a._v('World"')]),a._v("\nHello"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("nWorld\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 双引号的情况")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" -e "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[a._v("\\n")]),a._v('World"')]),a._v("\nHello\nWorld\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 单引号的情况")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" -e "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Hello\\nWorld'")]),a._v("\nHello\nWorld\n")])])]),t("p",[a._v("上面代码中，"),t("code",[a._v("-e")]),a._v("参数使得"),t("code",[a._v("\\n")]),a._v("解释为换行符，导致输出内容里面出现换行。")]),a._v(" "),t("h2",{attrs:{id:"命令格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令格式"}},[a._v("#")]),a._v(" 命令格式")]),a._v(" "),t("p",[a._v("命令行环境中，主要通过使用 Shell 命令，进行各种操作。Shell 命令基本都是下面的格式。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("command")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" arg1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(". "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" argN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),t("p",[a._v("上面代码中，"),t("code",[a._v("command")]),a._v("是具体的命令或者一个可执行文件，"),t("code",[a._v("arg1 ... argN")]),a._v("是传递给命令的参数，它们是可选的。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" -l\n")])])]),t("p",[a._v("上面这个命令中，"),t("code",[a._v("ls")]),a._v("是命令，"),t("code",[a._v("-l")]),a._v("是参数。")]),a._v(" "),t("p",[a._v("有些参数是命令的配置项，这些配置项一般都以一个连词线开头，比如上面的"),t("code",[a._v("-l")]),a._v("。同一个配置项往往有长和短两种形式，比如"),t("code",[a._v("-l")]),a._v("是短形式，"),t("code",[a._v("--list")]),a._v("是长形式，它们的作用完全相同。短形式便于手动输入，长形式一般用在脚本之中，可读性更好，利于解释自身的含义。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 短形式")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" -r\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 长形式")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" --reverse\n")])])]),t("p",[a._v("上面命令中，"),t("code",[a._v("-r")]),a._v("是短形式，"),t("code",[a._v("--reverse")]),a._v("是长形式，作用完全一样。前者便于输入，后者便于理解。")]),a._v(" "),t("p",[a._v("Bash 单个命令一般都是一行，用户按下回车键，就开始执行。有些命令比较长，写成多行会有利于阅读和编辑，这时可以在每一行的结尾加上反斜杠，Bash 就会将下一行跟当前行放在一起解释。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" foo bar\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 等同于")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" foo "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\nbar\n")])])]),t("h2",{attrs:{id:"空格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空格"}},[a._v("#")]),a._v(" 空格")]),a._v(" "),t("p",[a._v("Bash 使用空格（或 Tab 键）区分不同的参数。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("command")]),a._v(" foo bar\n")])])]),t("p",[a._v("上面命令中，"),t("code",[a._v("foo")]),a._v("和"),t("code",[a._v("bar")]),a._v("之间有一个空格，所以 Bash 认为它们是两个参数。")]),a._v(" "),t("p",[a._v("如果参数之间有多个空格，Bash 会自动忽略多余的空格。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" this is a     "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("test")]),a._v("\nthis is a "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("test")]),a._v("\n")])])]),t("p",[a._v("上面命令中，"),t("code",[a._v("a")]),a._v("和"),t("code",[a._v("test")]),a._v("之间有多个空格，Bash 会忽略多余的空格。")]),a._v(" "),t("h2",{attrs:{id:"分号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分号"}},[a._v("#")]),a._v(" 分号")]),a._v(" "),t("p",[a._v("分号（"),t("code",[a._v(";")]),a._v("）是命令的结束符，使得一行可以放置多个命令，上一个命令执行结束后，再执行第二个命令。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("clear")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v("\n")])])]),t("p",[a._v("上面例子中，Bash 先执行"),t("code",[a._v("clear")]),a._v("命令，执行完成后，再执行"),t("code",[a._v("ls")]),a._v("命令。")]),a._v(" "),t("p",[a._v("注意，使用分号时，第二个命令总是接着第一个命令执行，不管第一个命令执行成功或失败。")]),a._v(" "),t("h2",{attrs:{id:"命令的组合符-和"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令的组合符-和"}},[a._v("#")]),a._v(" 命令的组合符"),t("code",[a._v("&&")]),a._v("和"),t("code",[a._v("||")])]),a._v(" "),t("p",[a._v("除了分号，Bash 还提供两个命令组合符"),t("code",[a._v("&&")]),a._v("和"),t("code",[a._v("||")]),a._v("，允许更好地控制多个命令之间的继发关系。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("Command1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" Command2\n")])])]),t("p",[a._v("上面命令的意思是，如果"),t("code",[a._v("Command1")]),a._v("命令运行成功，则继续运行"),t("code",[a._v("Command2")]),a._v("命令。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("Command1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v(" Command2\n")])])]),t("p",[a._v("上面命令的意思是，如果"),t("code",[a._v("Command1")]),a._v("命令运行失败，则继续运行"),t("code",[a._v("Command2")]),a._v("命令。")]),a._v(" "),t("p",[a._v("下面是一些例子。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" filelist.txt "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" -l filelist.txt\n")])])]),t("p",[a._v("上面例子中，只要"),t("code",[a._v("cat")]),a._v("命令执行结束，不管成功或失败，都会继续执行"),t("code",[a._v("ls")]),a._v("命令。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" filelist.txt "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" -l filelist.txt\n")])])]),t("p",[a._v("上面例子中，只有"),t("code",[a._v("cat")]),a._v("命令执行成功，才会继续执行"),t("code",[a._v("ls")]),a._v("命令。如果"),t("code",[a._v("cat")]),a._v("执行失败（比如不存在文件"),t("code",[a._v("flielist.txt")]),a._v("），那么"),t("code",[a._v("ls")]),a._v("命令就不会执行。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" bar\n")])])]),t("p",[a._v("上面例子中，只有"),t("code",[a._v("mkdir foo")]),a._v("命令执行失败（比如"),t("code",[a._v("foo")]),a._v("目录已经存在），才会继续执行"),t("code",[a._v("mkdir bar")]),a._v("命令。如果"),t("code",[a._v("mkdir foo")]),a._v("命令执行成功，就不会创建"),t("code",[a._v("bar")]),a._v("目录了。")]),a._v(" "),t("h2",{attrs:{id:"type-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#type-命令"}},[a._v("#")]),a._v(" type 命令")]),a._v(" "),t("p",[a._v("Bash 本身内置了很多命令，同时也可以执行外部程序。怎么知道一个命令是内置命令，还是外部程序呢？")]),a._v(" "),t("p",[t("code",[a._v("type")]),a._v("命令用来判断命令的来源。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("type")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" is a shell "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("builtin")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("type")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" is hashed "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("/bin/ls"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("上面代码中，"),t("code",[a._v("type")]),a._v("命令告诉我们，"),t("code",[a._v("echo")]),a._v("是内部命令，"),t("code",[a._v("ls")]),a._v("是外部程序（"),t("code",[a._v("/bin/ls")]),a._v("）。")]),a._v(" "),t("p",[t("code",[a._v("type")]),a._v("命令本身也是内置命令。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("type")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("type")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("type")]),a._v(" is a shell "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("builtin")]),a._v("\n")])])]),t("p",[a._v("如果要查看一个命令的所有定义，可以使用"),t("code",[a._v("type")]),a._v("命令的"),t("code",[a._v("-a")]),a._v("参数。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("type")]),a._v(" -a "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" is shell "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("builtin")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" is /usr/bin/echo\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" is /bin/echo\n")])])]),t("p",[a._v("上面代码表示，"),t("code",[a._v("echo")]),a._v("命令既是内置命令，也有对应的外部程序。")]),a._v(" "),t("p",[t("code",[a._v("type")]),a._v("命令的"),t("code",[a._v("-t")]),a._v("参数，可以返回一个命令的类型：别名（alias），关键词（keyword），函数（function），内置命令（builtin）和文件（file）。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("type")]),a._v(" -t "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("file")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("type")]),a._v(" -t "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v("\nkeyword\n")])])]),t("p",[a._v("上面例子中，"),t("code",[a._v("bash")]),a._v("是文件，"),t("code",[a._v("if")]),a._v("是关键词。")]),a._v(" "),t("h2",{attrs:{id:"快捷键"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#快捷键"}},[a._v("#")]),a._v(" 快捷键")]),a._v(" "),t("p",[a._v("Bash 提供很多快捷键，可以大大方便操作。下面是一些最常用的快捷键，完整的介绍参见《行操作》一章。")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("Ctrl + L")]),a._v("：清除屏幕并将当前行移到页面顶部。")]),a._v(" "),t("li",[t("code",[a._v("Ctrl + C")]),a._v("：中止当前正在执行的命令。")]),a._v(" "),t("li",[t("code",[a._v("Shift + PageUp")]),a._v("：向上滚动。")]),a._v(" "),t("li",[t("code",[a._v("Shift + PageDown")]),a._v("：向下滚动。")]),a._v(" "),t("li",[t("code",[a._v("Ctrl + U")]),a._v("：从光标位置删除到行首。")]),a._v(" "),t("li",[t("code",[a._v("Ctrl + K")]),a._v("：从光标位置删除到行尾。")]),a._v(" "),t("li",[t("code",[a._v("Ctrl + D")]),a._v("：关闭 Shell 会话。")]),a._v(" "),t("li",[t("code",[a._v("↑")]),a._v("，"),t("code",[a._v("↓")]),a._v("：浏览已执行命令的历史记录。")])]),a._v(" "),t("p",[a._v("除了上面的快捷键，Bash 还具有自动补全功能。命令输入到一半的时候，可以按下 Tab 键，Bash 会自动完成剩下的部分。比如，输入"),t("code",[a._v("pw")]),a._v("，然后按一下 Tab 键，Bash 会自动补上"),t("code",[a._v("d")]),a._v("。")]),a._v(" "),t("p",[a._v("除了命令的自动补全，Bash 还支持路径的自动补全。有时，需要输入很长的路径，这时只需要输入前面的部分，然后按下 Tab 键，就会自动补全后面的部分。如果有多个可能的选择，按两次 Tab 键，Bash 会显示所有选项，让你选择。")])])}),[],!1,null,null,null);s.default=v.exports}}]);