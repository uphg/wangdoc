(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{510:function(s,a,t){"use strict";t.r(a);var n=t(76),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"bash-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bash-函数"}},[s._v("#")]),s._v(" Bash 函数")]),s._v(" "),t("p",[s._v("本章介绍 Bash 函数的用法。")]),s._v(" "),t("h2",{attrs:{id:"简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),t("p",[s._v("函数（function）是可以重复使用的代码片段，有利于代码的复用。它与别名（alias）的区别是，别名只适合封装简单的单个命令，函数则可以封装复杂的多行命令。")]),s._v(" "),t("p",[s._v("函数总是在当前 Shell 执行，这是跟脚本的一个重大区别，Bash 会新建一个子 Shell 执行脚本。如果函数与脚本同名，函数会优先执行。但是，函数的优先级不如别名，即如果函数与别名同名，那么别名优先执行。")]),s._v(" "),t("p",[s._v("Bash 函数定义的语法有两种。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第一种")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("fn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# codes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第二种")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("fn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# codes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("上面代码中，"),t("code",[s._v("fn")]),s._v("是自定义的函数名，函数代码就写在大括号之中。这两种写法是等价的。")]),s._v(" "),t("p",[s._v("下面是一个简单函数的例子。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("上面代码中，函数体里面的"),t("code",[s._v("$1")]),s._v("表示函数调用时的第一个参数。")]),s._v(" "),t("p",[s._v("调用时，就直接写函数名，参数跟在函数名后面。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ hello world\nHello world\n")])])]),t("p",[s._v("下面是一个多行函数的例子，显示当前日期时间。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("today")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -n "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Today\'s date is: "')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("date")]),s._v(" +"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%A, %B %-d, %Y"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("删除一个函数，可以使用"),t("code",[s._v("unset")]),s._v("命令。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("unset")]),s._v(" -f functionName\n")])])]),t("p",[s._v("查看当前 Shell 已经定义的所有函数，可以使用"),t("code",[s._v("declare")]),s._v("命令。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("declare")]),s._v(" -f\n")])])]),t("p",[s._v("上面的"),t("code",[s._v("declare")]),s._v("命令不仅会输出函数名，还会输出所有定义。输出顺序是按照函数名的字母表顺序。由于会输出很多内容，最好通过管道命令配合"),t("code",[s._v("more")]),s._v("或"),t("code",[s._v("less")]),s._v("使用。")]),s._v(" "),t("p",[t("code",[s._v("declare")]),s._v("命令还支持查看单个函数的定义。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("declare")]),s._v(" -f functionName\n")])])]),t("p",[t("code",[s._v("declare -F")]),s._v("可以输出所有已经定义的函数名，不含函数体。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("declare")]),s._v(" -F\n")])])]),t("h2",{attrs:{id:"参数变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数变量"}},[s._v("#")]),s._v(" 参数变量")]),s._v(" "),t("p",[s._v("函数体内可以使用参数变量，获取函数参数。函数的参数变量，与脚本参数变量是一致的。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("$1")]),s._v("~"),t("code",[s._v("$9")]),s._v("：函数的第一个到第9个的参数。")]),s._v(" "),t("li",[t("code",[s._v("$0")]),s._v("：函数所在的脚本名。")]),s._v(" "),t("li",[t("code",[s._v("$#")]),s._v("：函数的参数总数。")]),s._v(" "),t("li",[t("code",[s._v("$@")]),s._v("：函数的全部参数，参数之间使用空格分隔。")]),s._v(" "),t("li",[t("code",[s._v("$*")]),s._v("：函数的全部参数，参数之间使用变量"),t("code",[s._v("$IFS")]),s._v("值的第一个字符分隔，默认为空格，但是可以自定义。")])]),s._v(" "),t("p",[s._v("如果函数的参数多于9个，那么第10个参数可以用"),t("code",[s._v("${10}")]),s._v("的形式引用，以此类推。")]),s._v(" "),t("p",[s._v("下面是一个示例脚本"),t("code",[s._v("test.sh")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# test.sh")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("alice")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"alice: '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v('"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v(": "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),s._v('"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#")]),s._v(' arguments"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\nalice "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" wonderland\n")])])]),t("p",[s._v("运行该脚本，结果如下。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" test.sh\nalice: "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" wonderland\ntest.sh: "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" wonderland\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" arguments\n")])])]),t("p",[s._v("上面例子中，由于函数"),t("code",[s._v("alice")]),s._v("只有第一个和第二个参数，所以第三个和第四个参数为空。")]),s._v(" "),t("p",[s._v("下面是一个日志函数的例子。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("log_msg")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"['),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("date")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'+ %F %T'")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" ]: "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("使用方法如下。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ log_msg "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This is sample log message"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2018")]),s._v("-08-16 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v(":56:34 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(": This is sample log message\n")])])]),t("h2",{attrs:{id:"return-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#return-命令"}},[s._v("#")]),s._v(" return 命令")]),s._v(" "),t("p",[t("code",[s._v("return")]),s._v("命令用于从函数返回一个值。函数执行到这条命令，就不再往下执行了，直接返回了。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("func_return_value")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("函数将返回值返回给调用者。如果命令行直接执行函数，下一个命令可以用"),t("code",[s._v("$?")]),s._v("拿到返回值。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ func_return_value\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Value returned by function is: '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v('"')]),s._v("\nValue returned by "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" is: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n")])])]),t("p",[t("code",[s._v("return")]),s._v("后面不跟参数，只用于返回也是可以的。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("name")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  commands\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("h2",{attrs:{id:"全局变量和局部变量-local-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局变量和局部变量-local-命令"}},[s._v("#")]),s._v(" 全局变量和局部变量，local 命令")]),s._v(" "),t("p",[s._v("Bash 函数体内直接声明的变量，属于全局变量，整个脚本都可以读取。这一点需要特别小心。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 脚本 test.sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fn: foo = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$foo")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\nfn\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"global: foo = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$foo")]),s._v('"')]),s._v("\n")])])]),t("p",[s._v("上面脚本的运行结果如下。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" test.sh\nfn: foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nglobal: foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])])]),t("p",[s._v("上面例子中，变量"),t("code",[s._v("$foo")]),s._v("是在函数"),t("code",[s._v("fn")]),s._v("内部声明的，函数体外也可以读取。")]),s._v(" "),t("p",[s._v("函数体内不仅可以声明全局变量，还可以修改全局变量。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#! /bin/bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\nfn\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$foo")]),s._v("\n")])])]),t("p",[s._v("上面代码执行后，输出的变量"),t("code",[s._v("$foo")]),s._v("值为2。")]),s._v(" "),t("p",[s._v("函数里面可以用"),t("code",[s._v("local")]),s._v("命令声明局部变量。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#! /bin/bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 脚本 test.sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("fn")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("local")]),s._v(" foo\n  "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fn: foo = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$foo")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\nfn\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"global: foo = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$foo")]),s._v('"')]),s._v("\n")])])]),t("p",[s._v("上面脚本的运行结果如下。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" test.sh\nfn: foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nglobal: foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n")])])]),t("p",[s._v("上面例子中，"),t("code",[s._v("local")]),s._v("命令声明的"),t("code",[s._v("$foo")]),s._v("变量，只在函数体内有效，函数体外没有定义。")]),s._v(" "),t("h2",{attrs:{id:"参考链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[s._v("#")]),s._v(" 参考链接")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.linuxtechi.com/define-use-functions-linux-shell-script/",target:"_blank",rel:"noopener noreferrer"}},[s._v("How to define and use functions in Linux Shell Script"),t("OutboundLink")],1),s._v(", by Pradeep Kumar")])])])}),[],!1,null,null,null);a.default=e.exports}}]);